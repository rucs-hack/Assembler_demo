#+TITLE:     linux terminal Tutorial
#+AUTHOR:    carey pridgeon
#+EMAIL:     ab0475@coventry.ac.uk
#+OPTIONS: toc:nil
#+LaTeX_CLASS_OPTIONS: [minimal, t]
#+OPTIONS: ^:nil
#+STARTUP: showeverything
* Introduction To the Linux Terminal
- In this Worksheet you will cover a range of the commands available
  in the Linux Terminal and commands useful to you on this degree course.
- Read the *entire* worksheet *before you begin*. You should always do
  this with any worksheet, assignment or exam you are given.
- The format is that the commands you are to use are listed and explained, then
  the task you are to do with them follows.
- When you see any text in square Brackets, *do not type them, just
  what they ask you to type in*
- /[filename]/ means *replace the bracketed text /and the brackets themselves/
  with your own text/filename/foldername*.
** Commands reference
- This section is *not* the exercise, this is the reference */for/* the
  exercise.
- /Never/ type the square brackets used in this worksheet, replace any
  text in square brackets with new text. The format *[your text]* is
  commonly used in computing to mean /replace this with your own text/.
- *ls*
 - List your files.
- *ls -la*
 - List all your files in long format including hidden files (displays permissions)
- *ls -R*
 - List the files in a folder tree recursively
- *cd [directory name]*
 - Change directory
- *cd ~*
 - Change to your home directory
- *cd ..* 
 - Move up one directory in the tree
- *pwd*
 - Print the working directory
- *rm [file]*
 - Delete the specified file
- *rm -rf [dir]*
 - Delete the specified directory recursively(rm alone will not work)
- *cp [file] [dest]*
 - Copy a file (send a copy to a new folder or filename)
- *mv file [dest]*
 - Move a file (to a new folder or change filename)
- *chmod +x [filename]*
 - Change permissions on a file (in this case making it executable)
- *./[filename]*
 - Run a program in your home folder
- *sh [filename]*
 - Run a bash script (file with an .sh extension)
- *ln -s [original file/location] [/new/location/name]*
 - Create a symbolic link to a file in a specified location. Or just
   give a name, not a path if you want the sym link in the current folder
  - A symbolic link allows you to keep a reference to a file somewhere
    other than where that directory/file exists, so you can access it
    directly without navigating to that directory/file through the
    normal path.
  - It can also be used to allow typing of a simpler name than the
    files real one, which can simplify the process of typing complex
    filenames. 
  - This is similar to windows shortcuts some of you will be familiar
    with, but more capable.
- *touch [file]*
 - Update the timestamp on, or create, a file 
- *mkdir [dirname]*
 - Create the specified directory
- *Mkdir â€“m 700 [dirname]*
 - Create a folder with the specified permissions (owner can execute)
- *less [filename]* 
 - Display the contents of a large file one line at a time, advanced
   by pressing [return], exit by pressing *q*
- *cat* 
 - Concatenate (join) specified files to some source file/location, if no
   destination is set, the terminal is used.
 - *cat [file1] [file2] > [newfile]*
- *wget url/[filename]*
 - Download a file from a webserver
- *grep [string] [file]*
 - Locate a specified string in a given file
- *less [filename]*
 - This utility will allow you to scroll back and forth through a text
   file one line at a time in the console.
  - Many Linux commands accept input from the keyboard (called
    Standard Input) and produce output to the terminal screen (called
    Standard Output).
- *> [destination filename]*
 - Redirect standard output to a file, over-writing its contents or
   creating it if it doesn't exist.
- *>>* 
 - Append standard output to file at the end of the file, also
   creating it if it doesn't exist already.
- *date;who*
 - List who is logged into the system and the date/time.
- *man [subject]*
 - Display the manual (man page) for the specified Linux command or
   almost any Linux aspect.
- *man -k [string]*
 - search the man system for an entry with a name containing the given
   string, or containing that string.
- Tar (Tape Archiver) 
 - This is a utility to compress a folder into a single
   file. Originally intended to create single file backups to write to
   large tapes for long term storage. Google are the worlds largest
   consumers of tapes of this type. Tar's native compression is light
   to the point of nonexistant, so it can be combined with external
   compression libraries though command options.
- *tar -cvf archive_name.tar dirname/*
 - Create a single file archive. 
- *tar -cvzf archive_name.tar.gz dirname/*
 - Create a single file archive filtered through gzip for compression 
- *tar -xvf archive_name.tar.gz
 - Extract a file archive 
- *tar -zxvf archive_name.tar.gz -C [optional output dir]*
 - Extract a file archive to a specified directory
- *tar -tvf archive_name.tar*
 - List the contents of a tar file (compressed or not) without extracting it
* Worksheet tasks
- *Do these tasks one at a time, don't combine tasks even if it looks like you can.*
- list the files in your home directory so that hidden files are also shown.
- make a directory called 120 in your home directory
- change to this sub-directory
- create a folder called *cli*
- change to this sub-directory
- print the full path for this directory and redirect the output to
  /text.txt/ int the cli folder
- Change back to the home directory
- Create a symbolic link to 120/cli/text.txt in your home directory called txt.
- cat this symlink.
- Create empty file 120/cli/bashrc.txt without using a text editor
- Concatenate /etc/bash.bashrc to 120/cli/bashrc.txt
- Display this file in the terminal 
- Search for the word 'command' in bashrc.txt
- Redirect the output you see to the file 120/cli/out.txt and print
  this to the console.
- Create a file myls in 120/cli and write *ls -la /* in it
- Make this file executable and run it.
- If it works (prints the result of *ls -la /*, run it again and
  redirect the output, appending it to out.txt
- redirect a list of who is logged in to nostromo to 120/cli/who.txt
- Create a symlink to cli in your home directory.
- Use this symlink to list the contants of cli/
- Search man for entries containing *less*
- Repeat this search and redirect the output to 120/cli/less.txt, then
  display this file in the terminal.
- Fetch this file into 120/cli
#+BEGIN_EXAMPLE
 http://computing.coventry.ac.uk/~carey/speculation.png 
#+END_EXAMPLE
- In *man*, find one of the commands you have used in this tutorial.
- tar the 120 folder
- tar the 120 folder with gzip compression
- list the contents of the first tar file
- list the contents of the second tar file
- create a folder called tmp in 120 and untar the gzip compressed tar
  file into it
- recursively list the contents of 120


